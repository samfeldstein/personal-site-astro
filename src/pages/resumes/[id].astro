---
import Base from "@layouts/Base.astro";
import Head from "@components/Head.astro";
import Email from "@components/Email.astro";

import "/src/styles/_resume.scss";
import "/src/styles/_resume-print.scss";

import { author } from "config.mjs";

import { getCollection } from "astro:content";

// Import resume sections
import {
  workHistory,
  projects,
  publications,
  volunteer,
  education,
} from "../../data/resume.js";

export async function getStaticPaths() {
  const entries = await getCollection("resumes");
  return entries.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;

const description = `Sam Feldstein's ${entry.data.title} résumé.`;
const preloadFonts = ["cormorant", "noto-sans"];

const sectionData = {};
if (entry.data.sections) {
  Object.keys(entry.data.sections).forEach((key) => {
    switch (key) {
      case "education":
        sectionData[key] = entry.data.sections[key].map(
          (k) => education[k] || {},
        );
        break;
      case "relevantExperience":
      case "otherExperience":
        sectionData[key] = entry.data.sections[key].map(
          (k) => workHistory[k] || {},
        );
        break;
      case "projects":
        sectionData[key] = entry.data.sections[key].map(
          (k) => projects[k] || {},
        );
        break;
      case "volunteer":
        sectionData[key] = entry.data.sections[key].map(
          (k) => volunteer[k] || {},
        );
        break;
      case "publications":
        sectionData[key] = entry.data.sections[key].map(
          (k) => publications[k] || {},
        );
        break;
      case "skills":
        sectionData[key] = entry.data.sections[key];
        break;
    }
  });
}
---

<Base>
  <Head
    slot="head"
    title=`${entry.data.title} Résumé`
    description={description}
    preloadFonts={preloadFonts}
  />
  <header>
    <nav class="main no-print">
      <a href="/">Home</a>
      <a
        class="download-link"
        href=`/static/resumes/sam-feldstein-${entry.data.printUrl}-resume.pdf`
        target="_blank">Download PDF</a
      >
    </nav>

    <h1>
      <span class="name">Sam Feldstein</span>
      <span class="role">{entry.data.title}</span>
    </h1>

    <div class="address-grid-container">
      <address>
        <span class="location">Boulder, CO</span>
        <a href="tel:5156572243">(515) 657-2243</a>
        <Email>{author.email}</Email>
        <a class="no-web" href="https://samfeldstein.xyz">samfeldstein.xyz</a>
        {
          entry.data.links.map((link) => (
            <a class="no-print" href={link.url}>
              {link.name}
            </a>
          ))
        }
      </address>
    </div>

    {entry.data.summary && <p class="summary">{entry.data.summary}</p>}

    <nav class="contents">
      <div>
        {
          Object.keys(entry.data.sections || {})
            .filter((key) => key !== "otherExperience")
            .slice(
              0,
              Math.ceil(
                Object.keys(entry.data.sections || {}).filter(
                  (key) => key !== "otherExperience",
                ).length / 2,
              ),
            )
            .map((sectionKey) => {
              const sectionNames = {
                education: "Education",
                skills: "Skills",
                relevantExperience: "Experience",
                projects: "Projects",
                volunteer: "Volunteer",
                publications: "Publications",
              };
              const sectionIds = {
                relevantExperience: "relevant-experience",
              };

              return (
                <a href={`#${sectionIds[sectionKey] || sectionKey}`}>
                  {sectionNames[sectionKey]}
                </a>
              );
            })
        }
      </div>
      <div>
        {
          Object.keys(entry.data.sections || {})
            .filter((key) => key !== "otherExperience")
            .slice(
              Math.ceil(
                Object.keys(entry.data.sections || {}).filter(
                  (key) => key !== "otherExperience",
                ).length / 2,
              ),
            )
            .map((sectionKey) => {
              const sectionNames = {
                education: "Education",
                skills: "Skills",
                relevantExperience: "Experience",
                projects: "Projects",
                volunteer: "Volunteer",
                publications: "Publications",
              };
              const sectionIds = {
                relevantExperience: "relevant-experience",
              };

              return (
                <a href={`#${sectionIds[sectionKey] || sectionKey}`}>
                  {sectionNames[sectionKey]}
                </a>
              );
            })
        }
      </div>
    </nav>
  </header>

  <main id="main-content">
    {
      Object.keys(entry.data.sections || {}).map((sectionKey) => {
        const data = sectionData[sectionKey];

        switch (sectionKey) {
          case "education":
            return (
              <section id="education">
                <h2>Education</h2>
                <div class="education">
                  {data?.map((entry) => (
                    <article>
                      <h3>{entry.school}</h3>
                      <div class="info">
                        {entry.city} | <span>{entry.date}</span>
                      </div>
                      <ul>
                        <li set:html={entry.degree} />
                        {entry.achievements.map((achievement) => (
                          <li>{achievement}</li>
                        ))}
                      </ul>
                    </article>
                  ))}
                </div>
              </section>
            );
          case "skills":
            return (
              <section id="skills">
                <h2>Skills</h2>
                <div class="skills">
                  {data.map(({ category, items }) => (
                    <section>
                      <h3>{category}</h3>
                      <ul class="skills">
                        {items.map((skill) => (
                          <li>{skill}</li>
                        ))}
                      </ul>
                    </section>
                  ))}
                </div>
              </section>
            );

          case "relevantExperience":
            return (
              <section id="relevant-experience">
                <h2>Relevant Experience</h2>
                <div class="relevant-experience">
                  {data?.map((job) => (
                    <article>
                      <h3>
                        {job.role} {job.employer && `@ ${job.employer}`}
                      </h3>
                      <div class="info">
                        <span>{job.date}</span> | {job.place}
                      </div>
                      <ul>
                        {job.description?.map((point) => (
                          <li set:html={point} />
                        ))}
                      </ul>
                    </article>
                  ))}
                </div>
              </section>
            );

          case "otherExperience":
            return (
              <section id="other-experience">
                <h2>Other Experience</h2>
                <div class="other-experience">
                  {data?.map((job) => (
                    <article>
                      <h3>
                        {job.role} {job.employer && `@ ${job.employer}`}
                      </h3>
                      <div class="info">
                        <span>{job.date}</span> | {job.place}
                      </div>
                      <ul>
                        {job.description?.map((point) => (
                          <li set:html={point} />
                        ))}
                      </ul>
                    </article>
                  ))}
                </div>
              </section>
            );

          case "projects":
            return (
              <section id="projects" class="projects">
                <h2>Projects</h2>
                <div class="projects">
                  {data?.map((project) => (
                    <article>
                      <h3>{project.title}</h3>
                      <div class="info">
                        <span>{project.type}</span> |{" "}
                        <span>{project.date}</span>
                      </div>
                      <p class="project-description">{project.description}</p>
                    </article>
                  ))}
                </div>
              </section>
            );

          case "volunteer":
            return (
              <section id="volunteer">
                <h2>Volunteer</h2>
                <div class="volunteer">
                  {data?.map((entry) => (
                    <article>
                      <h3>
                        {entry.role} {entry.employer && `@ ${entry.employer}`}
                      </h3>
                      <div class="info">
                        <span>{entry.date}</span>{" "}
                        {entry.place && `| ${entry.place}`}
                      </div>
                      <p>{entry.description}</p>
                    </article>
                  ))}
                </div>
              </section>
            );

          case "publications":
            return (
              <section id="publications">
                <h2>Publications</h2>
                <ul class="publications">
                  {data.map((pub) => (
                    <li>
                      <cite class="publication h3" set:html={pub.title} />
                      <div class="info">
                        {pub.medium} | <cite>{pub.outlet}</cite> |{" "}
                        <span>{pub.date}</span>
                      </div>
                    </li>
                  ))}
                </ul>
              </section>
            );
        }
      })
    }
  </main>
  <script>
    // Set --vh to the initial viewport height and don't update it. Prevent layout shift from 100vh on mobile
    const header = document.querySelector("header");

    if (header) {
      header.style.setProperty(
        "--vh",
        `${document.documentElement.clientHeight}px`,
      );
    }

    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight
  </script>
</Base>

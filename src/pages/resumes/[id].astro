---
import Base from "@layouts/Base.astro";
import Head from "@components/Head.astro";
import "/src/styles/_resume.scss";
import "/src/styles/_resume-print.scss";

import { getCollection } from "astro:content";

// Import resume sections
import {
  workHistory,
  projects,
  publications,
  volunteer,
  education,
} from "../../data/resume.js";

export async function getStaticPaths() {
  const entries = await getCollection("resumes");
  return entries.map((entry) => ({
    params: { id: entry.id },
    props: { entry },
  }));
}

const { entry } = Astro.props;

const description = `Sam Feldstein's ${entry.data.title.full} résumé.`;
const preloadFonts = ["cormorant", "noto"];

// Convert relevant keys into an array of job objects
const relevantWorkData = entry.data.work.map((key) => workHistory[key] || {});
const relevantProjectsData = entry.data.projects.map(
  (key) => projects[key] || {},
);
const relevantVolunteerData = entry.data.volunteer.map(
  (key) => volunteer[key] || {},
);
---

<Base>
  <Head
    slot="head"
    title=`${entry.data.title.full} Résumé`
    description={description}
    preloadFonts={preloadFonts}
  />
  <header>
    <address class="print">
      <div class="city">Boulder, CO</div>
      <a href="mailto:sam@samfeldstein.xyz">sam@samfeldstein.xyz</a>
    </address>
    <a
      class="download-link"
      href=`/static/resumes/sam-feldstein-${entry.data.printUrl}-resume.pdf`
      target="_blank">Download PDF</a
    >
    <hgroup>
      <h1>
        <span class="name">Samuel Feldstein,</span>
        <span class="role">{entry.data.title.full}</span>
      </h1>
    </hgroup>

    <div class="address-grid-container">
      <address class="web">
        <span class="location">Boulder, CO</span>
        <a href="/">Website</a>
        {entry.data.links.map((link) => <a href={link.url}>{link.name}</a>)}
        <a href="mailto:sam@samfeldstein.xyz">sam@samfeldstein.xyz</a>
      </address>
    </div>

    {entry.data.summary && <p class="summary">{entry.data.summary}</p>}

    <nav class="contents">
      <a href="#skills">Skills</a>
      <a href="#education">Education</a>
      <a href="#experience">Experience</a>
      <a href="#projects">Projects</a>
      <a href="#publications">Publications</a>
      <a href="#volunteer">Volunteer</a>
    </nav>
  </header>
  <main id="main-content">
    <section id="skills">
      <h2>Skills</h2>
      <div class="skills">
        {
          entry.data.skills.map(({ category, items }) => (
            <section>
              <h3>{category}</h3>
              <ul class="skills">
                {items.map((skill) => (
                  <li>{skill}</li>
                ))}
              </ul>
            </section>
          ))
        }
      </div>
    </section>

    <section id="education">
      <h2>Education</h2>
      <div class="education">
        {
          education.map((entry) => (
            <article>
              <h3>{entry.degree}</h3>
              <div class="info">
                {entry.school} | {entry.city} | <span>{entry.date}</span>
              </div>
            </article>
          ))
        }
      </div>
    </section>

    <section id="experience">
      <h2>Experience</h2>
      <div class="experience">
        {
          relevantWorkData?.map((job) => (
            <article>
              <h3>
                {job.role} {job.employer && `@ ${job.employer}`}
              </h3>
              <div class="info">
                <span>{job.date}</span> | {job.place}
              </div>
              <ul>
                {job.description?.map((point) => (
                  // Renders html in the object values
                  <li set:html={point} />
                ))}
              </ul>
            </article>
          ))
        }
      </div>
    </section>

    <section id="projects" class="projects">
      <h2>Projects</h2>
      <div class="projects">
        {
          relevantProjectsData?.map((project) => (
            <article>
              <h3>{project.title}</h3>
              <div class="info">
                <span>{project.type}</span> | <span>{project.date}</span>
              </div>
              <ul>
                {project.description?.map((point) => (
                  <li set:html={point} />
                ))}
              </ul>
            </article>
          ))
        }
      </div>
    </section>

    <section id="publications">
      <h2>Publications</h2>
      <ul class="publications">
        {
          publications.map((pub) => (
            <li>
              <cite class="publication h3" set:html={pub.title} />
              <div class="info">
                {pub.medium} | <cite>{pub.outlet}</cite> |{" "}
                <span>{pub.date}</span>
              </div>
            </li>
          ))
        }
      </ul>
    </section>

    <section id="volunteer">
      <h2>Volunteer</h2>
      <div class="volunteer">
        {
          relevantVolunteerData?.map((entry) => (
            <article>
              <h3>
                {entry.role} {entry.employer && `@ ${entry.employer}`}
              </h3>
              <div class="info">
                <span>{entry.date}</span> {entry.place && `| ${entry.place}`}
              </div>
              <ul>
                {entry.description?.map((point) => (
                  <li set:html={point} />
                ))}
              </ul>
            </article>
          ))
        }
      </div>
    </section>
  </main>
  <script>
    // Set --vh to the initial viewport height and don't update it. Prevent layout shift from 100vh on mobile
    const header = document.querySelector("header");

    if (header) {
      header.style.setProperty(
        "--vh",
        `${document.documentElement.clientHeight}px`,
      );
    }

    // See https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight
  </script>
</Base>

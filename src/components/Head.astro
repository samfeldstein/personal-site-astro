---
// Styles (automatically injected and inlined)
import "/src/styles/global.scss";

// Data
import { site } from "../../config.mjs";

// Variables and properties
const {
  title,
  description = title,
  ogTitle = title,
  ogDescription = description,
  ogType = "website",
  ogImage,
} = Astro.props;
---

<head>
  <meta charset="utf-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />

  <!-- Icons
      - Guide: https://evilmartians.com/chronicles/how-to-favicon-in-2021-six-files-that-fit-most-needs
      - Favicon generator: https://favicon.io
      - Another favicon generator: https://realfavicongenerator.net/
      - SVG generator: https://formito.com/tools/favicon
      - Image compressor: https://squoosh.app/
      - SVG optimizer: https://jakearchibald.github.io/svgomg/
      - Favicon checker: https://realfavicongenerator.net/favicon_checker  
    -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg?v=3" />
  <link
    rel="icon"
    type="image/png"
    sizes="96x96"
    href="/favicon-96x96.png?v=3"
  />
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
  <link
    rel="apple-touch-icon"
    sizes="180x180"
    href="/apple-touch-icon.png?v=3"
  />
  <meta name="apple-mobile-web-app-title" content="Sam Feldstein" />
  <link rel="manifest" href="/site.webmanifest" />

  <!-- Preload assets -->
  <link
    rel="preload"
    href="/fonts/subset-CMUSerif-Roman.woff2"
    as="font"
    type="font/woff2"
    crossorigin="anonymous"
  />
  <link
    rel="preload"
    href="/fonts/subset-CMUSerif-Bold.woff2"
    as="font"
    type="font/woff2"
    crossorigin="anonymous"
  />
  <link
    rel="preload"
    href="/fonts/subset-CMUSerif-Italic.woff2"
    as="font"
    type="font/woff2"
    crossorigin="anonymous"
  />
  <meta name="generator" content={Astro.generator} />
  <title>
    {title ? `${title} | ${site.title}` : "Sam Feldstein's Personal Website"}
  </title>
  <meta name="author" content="Sam Feldstein" />
  <meta name="description" content={description || site.description} />
  <meta property="og:title" content={ogTitle || site.title} />
  <meta name="twitter:title" content={ogTitle || site.title} />
  <meta property="og:description" content={ogDescription || site.description} />
  <meta
    name="twitter:description"
    content={ogDescription || site.description}
  />
  <meta property="og:type" content={ogType} />
  <meta property="og:url" content={Astro.url.href} />
  <meta
    property="og:image"
    content={ogImage ||
      "https://samfeldstein.xyz/images/sam-feldstein-open-graph-default.webp"}
  />
  <meta
    name="twitter:image"
    content={ogImage ||
      "https://samfeldstein.xyz/images/sam-feldstein-open-graph-default.webp"}
  />
  <link rel="sitemap" href="/sitemap-index.xml" />
  <link
    rel="alternate"
    type="application/rss+xml"
    title="Sam Feldstein's Blog"
    href={new URL("feed.xml", Astro.site)}
  />
  <link
    rel="alternate"
    type="application/atom+xml"
    title="Sam Feldstein's Notebook"
    href="https://notebook.samfeldstein.xyz/feed.xml"
  />

  <!-- Clean up old service workers -->
  <script>
    async function uninstallServiceWorkers() {
      try {
        // Get a list of all service worker registrations
        const registrations = await navigator.serviceWorker.getRegistrations();

        if (registrations.length === 0) {
          console.log("No service workers found to uninstall");
          return;
        }

        // Uninstall each service worker
        const uninstallPromises = registrations.map(async (registration) => {
          try {
            const success = await registration.unregister();
            if (success) {
              console.log(
                `Service worker at ${registration.scope} successfully uninstalled`,
              );
            } else {
              console.warn(
                `Failed to uninstall service worker at ${registration.scope}`,
              );
            }
          } catch (error) {
            console.error(
              `Error uninstalling service worker at ${registration.scope}:`,
              error,
            );
          }
        });

        // Wait for all uninstallation attempts to complete
        await Promise.all(uninstallPromises);

        console.log("Service worker uninstallation process completed");

        // Optional: Reload the page to ensure clean state
        // window.location.reload();
      } catch (error) {
        console.error("Error during service worker uninstallation:", error);
        throw error;
      }
    }

    uninstallServiceWorkers();
  </script>

  <!-- Prefetch internal links -->
  <script type="speculationrules">
    {
      "rules": [
        {
          "action": "prefetch",
          "source": "document",
          "where": {
            "href_matches": "^/.*"
          },
          "eagerness": "eager"
        }
      ]
    }
  </script>
</head>
